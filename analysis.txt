Sorted Array:
For a sorted array, the algorithm utilizes the two-pointer technique to find the pair of numbers that sum up to the target value. The two pointers, one starting at the beginning (left) and one at the end (right) of the array, move towards each other based on the sum of the elements at these pointers. If the sum is less than the target, the left pointer is incremented to increase the sum. If the sum is greater than the target, the right pointer is decremented to decrease the sum. This technique ensures that each element in the array is processed at most once, leading to a linear time complexity of O(n). This efficiency is achieved because the array is sorted, allowing the two-pointer method to work effectively in a single pass.

Unsorted Array:
For an unsorted array, the algorithm employs a HashSet to track the elements seen so far. As it iterates through the array, for each element, it calculates the complement (target - current element) and checks if this complement exists in the HashSet. If the complement is found, it means the pair that sums up to the target has been identified. If not, the current element is added to the HashSet. The use of the HashSet allows both insertions and lookups to be performed in average O(1) time. Thus, iterating through the array and performing these constant-time operations results in an overall linear time complexity of O(n). This approach ensures that the pair can be found efficiently without the need for sorting the array.